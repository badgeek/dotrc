{
	"django [settings] config for static file root path": {
		"prefix": "django [settings] config for static file root path",
		"body": [
			"STATIC_ROOT= os.path.join(BASE_DIR, 'static')",
			"STATIC_URL = '/static/'",
			"STATICFILES_DIRS = [ ",
			"    os.path.join(BASE_DIR, 'btre/static')",
			"]"
		],
		"description": ""
	},
	"django [urls] wrap selected as urls.py pattern": {
		"prefix": "django [urls] wrap selected as urls.py pattern",
		"body": [
			"path('$TM_SELECTED_TEXT', views.$TM_SELECTED_TEXT, name='$TM_SELECTED_TEXT'),"
		],
		"description": ""
	},
	"django [views] wrap selected as render function for views.py ex template/template.html": {
		"prefix": "django [views] wrap selected as render function for views.py ex template/template.html",
		"body": [
			"def ${TM_SELECTED_TEXT/.*\\/(.*)\\..+$/$1/}(request):",
			"    return render(request,'$TM_SELECTED_TEXT')",
			""
		],
		"description": "wrap template/template.html -> render function"
	},
	"django [settings] wrap selected add INSTALED_APPS": {
		"prefix": "django [settings] wrap selected add INSTALED_APPS",
		"body": [
			"'$TM_SELECTED_TEXT.apps.${TM_SELECTED_TEXT/[a-z]/${0:/upcase}/}Config',"
		],
		"description": ""
	},
	"django [model] get model sort by parameter and filter with parameter": {
		"prefix": "django [model] get model sort by parameter and filter with parameter",
		"body": [
			"$1 = ${2:ModelName}.objects.order_by('-${3:TableField}').filter(${4:TableField}=${5:True|Value })"
		],
		"description": ""
	},
	"add dictionary key value": {
		"prefix": "add",
		"body": [
			"'${1:Key}' : ${2:Value},"
		],
		"description": "add dictionary key value"
	},
	"django create dictionary": {
		"prefix": "dict",
		"body": [
			"${1:context} = {",
			"\t",
			"}"
		],
		"description": "django create dictionary"
	},
	"django [model] get items from model or show 404 not found": {
		"prefix": "django [model] get single item from model or show 404 not found",
		"body": [
			"${1:model} = get_object_or_404(${2:ModelName}, pk=${3:modelname_id_value})"
		],
		"description": "return model with id = modelname_id_value"
	},
	"django [views] GET http request variable": {
		"prefix": "django [views] GET http request variable",
		"body": [
			"$1 = request.GET.get('$1')",
			""
		],
		"description": ""
	},
	"django [views] get POST http request variable": {
		"prefix": "django [views] get POST http request variable",
		"body": [
			"$1 = request.POST.get('$1')",
			""
		],
		"description": ""
	},
	"django [model] get http request and use is as a filter search": {
		"prefix": "django [model] get http request and use is as a filter search",
		"body": [
			"if '${1:keywords}' in request.GET:",
			"    ${1:keywords} = request.GET.get('${1:keywords}')",
			"    if ${1:keywords}:",
			"        queryset_list = queryset_list.filter(${2:tablefield}__${3:icontains,iexact,lte}=${1:keywords})",
			""
		],
		"description": ""
	},
	"django [views] wrap text get http POST variable": {
		"prefix": "django [views] wrap text get http POST variable",
		"body": [
			"$TM_SELECTED_TEXT = request.POST.get('$TM_SELECTED_TEXT')",
			""
		],
		"description": ""
	},
	"django [views] wrap text get http GET variable": {
		"prefix": "django [views] wrap text get http GET variable",
		"body": [
			"$TM_SELECTED_TEXT = request.POST.get('$TM_SELECTED_TEXT')",
			""
		],
		"description": ""
	},
	"Python Wrap selected with if conditional": {
		"prefix": "Python Wrap selected with if conditional",
		"body": [
			"if ${1:condition == True}:",
			"$TM_SELECTED_TEXT"
		],
		"description": ""
	},
	"django [settings] add postgress database settings": {
		"prefix": "django [settings] add postgress database settings",
		"body": [
			"'default': {",
			"\t'ENGINE': 'django.db.backends.postgresql',",
			"\t'NAME': '${1:DATABASE_NAME}',",
			"\t'USER': '${2:DATABASE_USER_NAME}',",
			"\t'PASSWORD' : '${3:PASSWORD}',",
			"\t'HOST' : '${4:localhost}'",
			"},",
			""
		],
		"description": ""
	},
	"django [settings] static media path settings settings.py": {
		"prefix": "django [settings] static media path settings settings.py",
		"body": [
			"STATIC_ROOT= os.path.join(BASE_DIR, 'static')",
			"STATIC_URL = '/static/'",
			"STATICFILES_DIRS = [ ",
			"    os.path.join(BASE_DIR, 'btre/static')",
			"]",
			"",
			"MEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
			"MEDIA_URL = '/media/'"
		],
		"description": ""
	},
	"django [views] paginator paginate query result": {
		"prefix": "django [views] paginator paginate query result",
		"body": [
			"${1:paginator} = Paginator(${2:query_result}, ${3:item_per_page});",
			"${4:page} = request.GET.get('${4:page}')",
			"",
			"paged_${2:query_result} = paginator.get_page(${4:page})",
			""
		],
		"description": ""
	},
	"django [model] filter a model by tablefield value and constrain": {
		"prefix": "django [model] filter a model by tablefield value and constrain",
		"body": [
			"${1:queryset_list} = ${1:queryset_list}.filter(${2:table_field}__${3:icontains,iexact,lte}=${4:value})",
			""
		],
		"description": ""
	},
	"django [admin] add model to admin dashboard": {
		"prefix": "django [admin] add model to admin dashboard",
		"body": [
			"from .models import ${1:ModelName}",
			"# Register your models here.",
			"class ${1:ModelName}Admin(admin.ModelAdmin):",
			"    #list_display = ('title', 'is_published', 'price', 'list_date', 'realtor')",
			"    #list_display_link = ('id', 'title')",
			"    #list_filter = ('realtor',)",
			"    #list_editable = ('is_published','price')",
			"    #search_fields = ('title', 'description', 'price')",
			"    list_perpage = 25",
			"",
			"admin.site.register(${1:ModelName}, ${1:ModelName}Admin);",
			""
		],
		"description": ""
	},
	"django [model] create image field upload ": {
		"prefix": "django [model] create image field upload ",
		"body": [
			"${1:profile_picture} = models.ImageField(upload_to='photos/%Y/%m/%d/', blank=True)",
			""
		],
		"description": ""
	},
	"django [model] create date time field with value today": {
		"prefix": "django [model] create date time field with value today",
		"body": [
			"${1:date_active} = models.DateTimeField(default=datetime.now, blank=True)",
			""
		],
		"description": ""
	},
	"django [views] return redirect to a page name": {
		"prefix": "django [views] return redirect to a page name",
		"body": [
			"return redirect('${1:page_name}')",
			""
		],
		"description": ""
	},
	"django [views] send flash message success error": {
		"prefix": "django [views] send flash message success error",
		"body": [
			"messages.${1:success,error}(request, \"${2:password do not match}\")",
			""
		],
		"description": ""
	},
	"django [settings] enable messages init": {
		"prefix": "django [settings] enable messages init",
		"body": [
			"#Messages",
			"from django.contrib.messages import constants as messages",
			"MESSAGE_TAGS = {",
			"    message.ERROR: 'danger'",
			"}"
		],
		"description": ""
	},
	"django [views] [message] import message": {
		"prefix": "django [views] [message] import message",
		"body": [
			"from django.contrib import messages"
		],
		"description": ""
	},
	"django [message] alert show template partials": {
		"prefix": "django [message] alert show template partials",
		"body": [
			"{% if messages %}",
			"    {% for message in messages %}",
			"        <div id=\"message\" class=\"container\">",
			"            <div class=\"alert alert-{{message.tags}} alert-dismissible text-center\" role=\"alert\">",
			"                <button class=\"close\" type=\"button\" data-dismiss=\"alert\"><span aria-hidden=\"true\">&times;</span></button>",
			"                <strong>",
			"                    {% if message.level == DEFAULT_MESSAGE_LEVELS.ERROR %}",
			"                        Error",
			"                    {% else %}",
			"                        {{message.tags|title}}",
			"                    {% endif %}                        ",
			"                </strong>",
			"                {{message}}",
			"            </div>",
			"        </div>",
			"    {% endfor %}        ",
			"{% endif %}"
		],
		"description": "put it inside partials/_alerts.html"
	},
	"django [model] check if model with specified value exists": {
		"prefix": "django [model] check if model with specified value exists",
		"body": [
			"if ${1:ModelName}.objects.filter(${2:TableField}=${3:Value}).exists():",
			"    pass",
			"else:",
			"    pass",
			""
		],
		"description": ""
	},
	"django [auth] import user model": {
		"prefix": "django [auth] import user model",
		"body": [
			"from django.contrib.auth.models import User",
			""
		],
		"description": ""
	},
	"django [url] urls.py template": {
		"prefix": "django [url] urls.py template",
		"body": [
			"from django.urls import path",
			"from . import views",
			"",
			"urlpatterns = [",
			"    path('', views.index, name='index'),",
			"    #path('accounts/', include('accounts.urls')),",
			"",
			"] ",
			"",
			""
		],
		"description": ""
	}
}